{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/WebstormProjects/Exercise_App/Exercise_Logger/client/src/components/exercise/CardioResults.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { useLocation } from \"react-router-dom\";\n\nconst data = require(\"../data/cardioListData.json\");\n\nconst CardioResults = () => {\n  const location = useLocation();\n  const pages = [];\n  const [isOpen, setOpen] = useState(0);\n  const processedData = data.map((el, index) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: el.Exercise,\n      onClick: () => {\n        setOpen(index);\n      },\n      \"aria-controls\": \"collapse-text\",\n      \"aria-expanded\": isOpen,\n      style: {\n        background: `#24154a`,\n        backgroundSize: \"cover\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, el.Exercise)));\n  });\n  let pageCount = processedData.length / 10;\n  const [isCurrPage, SetCurrPage] = useState(1);\n  const [isPrevPage, SetPrevPages] = useState(0);\n  const [isNextPage, SetNextPages] = useState(2);\n  const [isPageRange, SetPageRange] = useState([1, 10]);\n  const [isDisplayData, SetDisplayData] = useState(processedData.slice(0, 10));\n  useEffect(() => {\n    SetCurrPage(Number(location.pathname.match(/\\d+/g)));\n    SetPrevPages(isCurrPage - 1);\n    SetNextPages(isCurrPage + 1);\n    SetDisplayData(processedData.slice(isCurrPage * 10 - 10, isCurrPage * 10));\n    let baseNum = Math.trunc(isCurrPage / 10) + 1;\n    SetPageRange([baseNum * 10 - 9, baseNum * 10]);\n  }, [isOpen, isCurrPage]);\n  pages.push( /*#__PURE__*/React.createElement(Pagination.First, {\n    key: \"page-1\",\n    href: \"/exlist/cardio/1/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 14\n    }\n  }));\n  if (isPageRange[0] - 1 > 0) pages.push( /*#__PURE__*/React.createElement(Pagination.Prev, {\n    onClick: () => {\n      SetPageRange([isPageRange[0] - 10, isPageRange[1] - 10]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }));\n\n  if (isPageRange[0] > 3) {\n    pages.push( /*#__PURE__*/React.createElement(Pagination.Ellipsis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 16\n      }\n    }));\n  }\n\n  for (let i = isPageRange[0]; i <= isPageRange[1]; i++) {\n    if (i <= Math.trunc(processedData.length / 10) + (processedData.length % 10 >= 1 ? 1 : 0)) {\n      pages.push( /*#__PURE__*/React.createElement(Pagination.Item, {\n        key: i,\n        href: `/exlist/cardio/${i}/`,\n        active: i === isCurrPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, i));\n    }\n  }\n\n  if (isPageRange[1] < Math.trunc(processedData.length / 10) + (processedData.length % 10 >= 1 ? 1 : 0)) {\n    pages.push( /*#__PURE__*/React.createElement(Pagination.Ellipsis, {\n      key: \"page-ellipsis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 16\n      }\n    }));\n    pages.push( /*#__PURE__*/React.createElement(Pagination.Next, {\n      onClick: () => {\n        SetPageRange([isPageRange[0] + 10, isPageRange[1] + 10]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  pages.push( /*#__PURE__*/React.createElement(Pagination.Last, {\n    href: `/exlist/cardio/${Math.trunc(processedData.length / 10) + (processedData.length % 10 >= 1 ? 1 : 0)}/`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    id: \"ex-list-desc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, isDisplayData), /*#__PURE__*/React.createElement(Pagination, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, pages));\n};\n\nexport default CardioResults;","map":{"version":3,"sources":["/Users/daniel/WebstormProjects/Exercise_App/Exercise_Logger/client/src/components/exercise/CardioResults.js"],"names":["React","useEffect","useState","Card","Pagination","useLocation","data","require","CardioResults","location","pages","isOpen","setOpen","processedData","map","el","index","Exercise","background","backgroundSize","pageCount","length","isCurrPage","SetCurrPage","isPrevPage","SetPrevPages","isNextPage","SetNextPages","isPageRange","SetPageRange","isDisplayData","SetDisplayData","slice","Number","pathname","match","baseNum","Math","trunc","push","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { useLocation } from \"react-router-dom\";\nconst data = require(\"../data/cardioListData.json\");\n\nconst CardioResults = () => {\n  const location = useLocation();\n  const pages = [];\n  const [isOpen, setOpen] = useState(0);\n\n  const processedData = data.map((el, index) => {\n    return (\n      <Card\n        key={el.Exercise}\n        onClick={() => {\n          setOpen(index);\n        }}\n        aria-controls=\"collapse-text\"\n        aria-expanded={isOpen}\n        style={{ background: `#24154a`, backgroundSize: \"cover\" }}\n      >\n        <Card.Body>\n          <Card.Title>{el.Exercise}</Card.Title>\n        </Card.Body>\n      </Card>\n    );\n  });\n  let pageCount = processedData.length / 10;\n  const [isCurrPage, SetCurrPage] = useState(1);\n  const [isPrevPage, SetPrevPages] = useState(0);\n  const [isNextPage, SetNextPages] = useState(2);\n  const [isPageRange, SetPageRange] = useState([1, 10]);\n  const [isDisplayData, SetDisplayData] = useState(processedData.slice(0, 10));\n  useEffect(() => {\n    SetCurrPage(Number(location.pathname.match(/\\d+/g)));\n    SetPrevPages(isCurrPage - 1);\n    SetNextPages(isCurrPage + 1);\n    SetDisplayData(processedData.slice(isCurrPage * 10 - 10, isCurrPage * 10));\n    let baseNum = Math.trunc(isCurrPage / 10) + 1;\n    SetPageRange([baseNum * 10 - 9, baseNum * 10]);\n  }, [isOpen, isCurrPage]);\n  pages.push(<Pagination.First key={\"page-1\"} href={\"/exlist/cardio/1/\"} />);\n  if (isPageRange[0] - 1 > 0)\n    pages.push(\n      <Pagination.Prev\n        onClick={() => {\n          SetPageRange([isPageRange[0] - 10, isPageRange[1] - 10]);\n        }}\n      />\n    );\n\n  if (isPageRange[0] > 3) {\n    pages.push(<Pagination.Ellipsis />);\n  }\n  for (let i = isPageRange[0]; i <= isPageRange[1]; i++) {\n    if (\n      i <=\n      Math.trunc(processedData.length / 10) +\n        (processedData.length % 10 >= 1 ? 1 : 0)\n    ) {\n      pages.push(\n        <Pagination.Item\n          key={i}\n          href={`/exlist/cardio/${i}/`}\n          active={i === isCurrPage}\n        >\n          {i}\n        </Pagination.Item>\n      );\n    }\n  }\n\n  if (\n    isPageRange[1] <\n    Math.trunc(processedData.length / 10) +\n      (processedData.length % 10 >= 1 ? 1 : 0)\n  ) {\n    pages.push(<Pagination.Ellipsis key={\"page-ellipsis\"} />);\n    pages.push(\n      <Pagination.Next\n        onClick={() => {\n          SetPageRange([isPageRange[0] + 10, isPageRange[1] + 10]);\n        }}\n      />\n    );\n  }\n  pages.push(\n    <Pagination.Last\n      href={`/exlist/cardio/${\n        Math.trunc(processedData.length / 10) +\n        (processedData.length % 10 >= 1 ? 1 : 0)\n      }/`}\n    />\n  );\n\n  return (\n    <div className=\"grid\">\n      <div className=\"col\" id=\"ex-list-desc\">\n        {isDisplayData}\n      </div>\n      <Pagination size=\"sm\">{pages}</Pagination>\n    </div>\n  );\n};\nexport default CardioResults;\n"]},"metadata":{},"sourceType":"module"}