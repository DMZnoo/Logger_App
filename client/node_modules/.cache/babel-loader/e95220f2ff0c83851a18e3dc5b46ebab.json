{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/WebstormProjects/Exercise_App/Exercise_Logger/client/src/components/log/ViewLogList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Accordion, Card } from \"react-bootstrap\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport SetNewWorkout from \"./SetNewWorkout\";\nimport ViewWorkoutList from \"./ViewWorkoutList\";\nimport SetNewLog from \"./SetNewLog\";\n\nconst ViewLogList = () => {\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [isShown, SetShown] = useState([]);\n  const [isDisplayList, SetDisplayList] = useState([]);\n  const [isCurrID, SetCurrID] = useState([]);\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = () => {\n    axios.get(`api/logs`).then(res => {\n      res.data.forEach((el, idx) => {\n        if (el.username === user.email) {\n          let currList = [];\n\n          for (let attr in el) {\n            if (el.hasOwnProperty(attr)) {\n              if (attr === \"_id\") SetCurrID(isCurrID => [...isCurrID, el[attr]]);\n              currList.push({\n                key: attr,\n                val: el[attr]\n              });\n            }\n          }\n\n          SetShown(isShown => [...isShown, false]);\n          SetDisplayList(isDisplayList => [...isDisplayList, currList]);\n        }\n      });\n    });\n  }; // const handleDelete = (e, idx) => {\n  //   e.preventDefault();\n  //   if (isWorkoutDesc.set.length > 1) {\n  //     let newIndexArr = [];\n  //     isWorkoutDesc.set.forEach((el, index) => {\n  //       if (index > idx) {\n  //         newIndexArr.push(el - 1);\n  //       }\n  //     });\n  //     SetWorkoutDesc({\n  //       set: [...isWorkoutDesc.set.slice(0, idx), ...newIndexArr],\n  //       reps: [\n  //         ...isWorkoutDesc.reps.slice(0, idx),\n  //         ...isWorkoutDesc.reps.slice(idx + 1),\n  //       ],\n  //       weight: [\n  //         ...isWorkoutDesc.weight.slice(0, idx),\n  //         ...isWorkoutDesc.weight.slice(idx + 1),\n  //       ],\n  //     });\n  //   } else {\n  //     SetWorkoutDesc({\n  //       set: [\n  //         ...isWorkoutDesc.set.slice(0, idx),\n  //         ...isWorkoutDesc.set.slice(idx + 1),\n  //       ],\n  //       reps: [\n  //         ...isWorkoutDesc.reps.slice(0, idx),\n  //         ...isWorkoutDesc.reps.slice(idx + 1),\n  //       ],\n  //       weight: [\n  //         ...isWorkoutDesc.weight.slice(0, idx),\n  //         ...isWorkoutDesc.weight.slice(idx + 1),\n  //       ],\n  //     });\n  //   }\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, isDisplayList.map((el, index) => {\n    return /*#__PURE__*/React.createElement(Accordion, {\n      key: \"log-disp\" + index,\n      className: \"p-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(el).map(log => {\n      if (log[1].key === \"title\") {\n        return /*#__PURE__*/React.createElement(Accordion.Toggle, {\n          as: Card.Header,\n          eventKey: \"0\",\n          id: \"log-title-\" + `${index}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 27\n          }\n        }, log[1].val);\n      } else if (log[1].key === \"description\") {\n        return /*#__PURE__*/React.createElement(Accordion.Collapse, {\n          eventKey: \"0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"p-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 31\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          id: \"log-desc-\" + `${index}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }\n        }, log[1].key === \"description\" && log[1].val)), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ViewWorkoutList, {\n          el: el,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }\n        })), /*#__PURE__*/React.createElement(SetNewWorkout, {\n          index: index,\n          isShown: isShown,\n          SetShown: SetShown,\n          isCurrID: isCurrID,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 31\n          }\n        })));\n      }\n    }))), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, Object.entries(el).map(log => {\n      if (log[1].key === \"date\") {\n        let date = new Date(log[1].val);\n        return date.toDateString();\n      }\n    })));\n  })), /*#__PURE__*/React.createElement(SetNewLog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ViewLogList;","map":{"version":3,"sources":["/Users/daniel/WebstormProjects/Exercise_App/Exercise_Logger/client/src/components/log/ViewLogList.js"],"names":["React","useState","useEffect","axios","Accordion","Card","useAuth0","SetNewWorkout","ViewWorkoutList","SetNewLog","ViewLogList","user","isAuthenticated","isShown","SetShown","isDisplayList","SetDisplayList","isCurrID","SetCurrID","fetchData","get","then","res","data","forEach","el","idx","username","email","currList","attr","hasOwnProperty","push","key","val","map","index","Object","entries","log","Header","date","Date","toDateString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Accordion, Card } from \"react-bootstrap\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport SetNewWorkout from \"./SetNewWorkout\";\nimport ViewWorkoutList from \"./ViewWorkoutList\";\nimport SetNewLog from \"./SetNewLog\";\nconst ViewLogList = () => {\n  const { user, isAuthenticated } = useAuth0();\n  const [isShown, SetShown] = useState([]);\n  const [isDisplayList, SetDisplayList] = useState([]);\n  const [isCurrID, SetCurrID] = useState([]);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = () => {\n    axios.get(`api/logs`).then((res) => {\n      res.data.forEach((el, idx) => {\n        if (el.username === user.email) {\n          let currList = [];\n          for (let attr in el) {\n            if (el.hasOwnProperty(attr)) {\n              if (attr === \"_id\")\n                SetCurrID((isCurrID) => [...isCurrID, el[attr]]);\n              currList.push({ key: attr, val: el[attr] });\n            }\n          }\n          SetShown((isShown) => [...isShown, false]);\n          SetDisplayList((isDisplayList) => [...isDisplayList, currList]);\n        }\n      });\n    });\n  };\n\n  // const handleDelete = (e, idx) => {\n  //   e.preventDefault();\n  //   if (isWorkoutDesc.set.length > 1) {\n  //     let newIndexArr = [];\n  //     isWorkoutDesc.set.forEach((el, index) => {\n  //       if (index > idx) {\n  //         newIndexArr.push(el - 1);\n  //       }\n  //     });\n  //     SetWorkoutDesc({\n  //       set: [...isWorkoutDesc.set.slice(0, idx), ...newIndexArr],\n  //       reps: [\n  //         ...isWorkoutDesc.reps.slice(0, idx),\n  //         ...isWorkoutDesc.reps.slice(idx + 1),\n  //       ],\n  //       weight: [\n  //         ...isWorkoutDesc.weight.slice(0, idx),\n  //         ...isWorkoutDesc.weight.slice(idx + 1),\n  //       ],\n  //     });\n  //   } else {\n  //     SetWorkoutDesc({\n  //       set: [\n  //         ...isWorkoutDesc.set.slice(0, idx),\n  //         ...isWorkoutDesc.set.slice(idx + 1),\n  //       ],\n  //       reps: [\n  //         ...isWorkoutDesc.reps.slice(0, idx),\n  //         ...isWorkoutDesc.reps.slice(idx + 1),\n  //       ],\n  //       weight: [\n  //         ...isWorkoutDesc.weight.slice(0, idx),\n  //         ...isWorkoutDesc.weight.slice(idx + 1),\n  //       ],\n  //     });\n  //   }\n  // };\n\n  return (\n    <>\n      <div>\n        {isDisplayList.map((el, index) => {\n          return (\n            <Accordion\n              key={\"log-disp\" + index}\n              className={\"p-2\"}\n            >\n              <Card>\n                {\n                  <>\n                    {Object.entries(el).map((log) => {\n                      if (log[1].key === \"title\") {\n                        return (\n                          <Accordion.Toggle\n                            as={Card.Header}\n                            eventKey=\"0\"\n                            id={\"log-title-\" + `${index}`}\n                          >\n                            {log[1].val}\n                          </Accordion.Toggle>\n                        );\n                      } else if (log[1].key === \"description\") {\n                        return (\n                          <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                              <div className={\"p-2\"}>\n                                <p id={\"log-desc-\" + `${index}`}>\n                                  {log[1].key === \"description\" && log[1].val}\n                                </p>\n                              </div>\n                              <>\n                                <ViewWorkoutList el={el} />\n                              </>\n                              <SetNewWorkout\n                                index={index}\n                                isShown={isShown}\n                                SetShown={SetShown}\n                                isCurrID={isCurrID}\n                              />\n                            </Card.Body>\n                          </Accordion.Collapse>\n                        );\n                      }\n                    })}\n                  </>\n                }\n              </Card>\n\n              <Card>\n                {Object.entries(el).map((log) => {\n                  if (log[1].key === \"date\") {\n                    let date = new Date(log[1].val);\n\t\t    return date.toDateString();\n                  }\n                })}\n              </Card>\n            </Accordion>\n          );\n        })}\n      </div>\n      <SetNewLog />\n    </>\n  );\n};\nexport default ViewLogList;\n"]},"metadata":{},"sourceType":"module"}