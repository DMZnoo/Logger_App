{"ast":null,"code":"import _defineProperty from\"/var/www/Exercise_Logger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/var/www/Exercise_Logger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Table}from\"react-bootstrap\";import SubmitEditLog from\"./SubmitEditLog\";import CustomTable from\"../../../partials/CustomTable\";import update from\"immutability-helper\";var EditLogList=function EditLogList(_ref){var el=_ref.el,index=_ref.index,isEdit=_ref.isEdit,isCurrID=_ref.isCurrID,updateData=_ref.updateData,SetEdit=_ref.SetEdit;var _useState=useState(el),_useState2=_slicedToArray(_useState,2),isEditList=_useState2[0],SetEditList=_useState2[1];return Object.entries(el).map(function(log){if(log[1].key===\"exercises\"){return/*#__PURE__*/React.createElement(React.Fragment,null,log[1].val.map(function(ex,li){return/*#__PURE__*/React.createElement(\"div\",{className:\"container\",style:{overflowX:\"auto\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Name: \"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"input\",{id:li,className:\"ml-2\",type:\"text\",size:15,placeholder:ex.name,onChange:function onChange(e){var index=Number(e.target.id);var val=e.target.value;SetEditList(function(isEditList){return update(isEditList,{0:{val:_defineProperty({},index,{name:{$set:val}})}});});}})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Description: \"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"textarea\",{id:li,className:\"mb-2 ml-2\",placeholder:ex.description,cols:50,rows:2,onChange:function onChange(e){var index=Number(e.target.id);var val=e.target.value;SetEditList(function(isEditList){return update(isEditList,{0:{val:_defineProperty({},index,{description:{$set:val}})}});});}})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(CustomTable,{index:li,thead:[\"Set\",\"Reps\",\"Weight\"],data:[ex.set,ex.reps,ex.weight],SetNewList:SetEditList,isNewList:isEditList,warning:false,editable:true,style:{fontSize:\"1.5vh\"}}),/*#__PURE__*/React.createElement(\"hr\",null));}),/*#__PURE__*/React.createElement(\"hr\",null),isEdit[index]&&/*#__PURE__*/React.createElement(SubmitEditLog,{index:index,isCurrID:isCurrID,isEdit:isEdit,SetEdit:SetEdit,isEditList:isEditList,updateData:updateData}));}});};export default EditLogList;","map":{"version":3,"sources":["/var/www/Exercise_Logger/client/src/components/log/actions/edit/EditLogList.js"],"names":["React","useEffect","useState","Table","SubmitEditLog","CustomTable","update","EditLogList","el","index","isEdit","isCurrID","updateData","SetEdit","isEditList","SetEditList","Object","entries","map","log","key","val","ex","li","overflowX","name","e","Number","target","id","value","$set","description","set","reps","weight","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport SubmitEditLog from \"./SubmitEditLog\";\nimport CustomTable from \"../../../partials/CustomTable\";\nimport update from \"immutability-helper\";\nconst EditLogList = ({ el, index, isEdit, isCurrID, updateData, SetEdit }) => {\n  const [isEditList, SetEditList] = useState(el);\n  return Object.entries(el).map((log) => {\n    if (log[1].key === \"exercises\") {\n      return (\n        <>\n          {log[1].val.map((ex, li) => {\n            return (\n              <div className={\"container\"} style={{ overflowX: \"auto\" }}>\n                <div className={\"d-flex\"}>\n                  <h5>Name: </h5>\n                  <br />\n                  <input\n                    id={li}\n                    className={\"ml-2\"}\n                    type=\"text\"\n                    size={15}\n                    placeholder={ex.name}\n                    onChange={(e) => {\n                      const index = Number(e.target.id);\n                      const val = e.target.value;\n                      SetEditList((isEditList) =>\n                        update(isEditList, {\n                          0: {\n                            val: {\n                              [index]: { name: { $set: val } },\n                            },\n                          },\n                        })\n                      );\n                    }}\n                  />\n                </div>\n                <hr />\n                <div className={\"d-flex\"}>\n                  <h5>Description: </h5>\n                  <br />\n                  <textarea\n                    id={li}\n                    className={\"mb-2 ml-2\"}\n                    placeholder={ex.description}\n                    cols={50}\n                    rows={2}\n                    onChange={(e) => {\n                      const index = Number(e.target.id);\n                      let val = e.target.value;\n                      SetEditList((isEditList) =>\n                        update(isEditList, {\n                          0: {\n                            val: {\n                              [index]: {\n                                description: { $set: val },\n                              },\n                            },\n                          },\n                        })\n                      );\n                    }}\n                  />\n                </div>\n                <hr />\n                <CustomTable\n                  index={li}\n                  thead={[\"Set\", \"Reps\", \"Weight\"]}\n                  data={[ex.set, ex.reps, ex.weight]}\n                  SetNewList={SetEditList}\n                  isNewList={isEditList}\n                  warning={false}\n                  editable={true}\n                  style={{ fontSize: \"1.5vh\" }}\n                />\n                <hr />\n              </div>\n            );\n          })}\n          <hr />\n          {isEdit[index] && (\n            <SubmitEditLog\n              index={index}\n              isCurrID={isCurrID}\n              isEdit={isEdit}\n              SetEdit={SetEdit}\n              isEditList={isEditList}\n              updateData={updateData}\n            />\n          )}\n        </>\n      );\n    }\n  });\n};\nexport default EditLogList;\n"]},"metadata":{},"sourceType":"module"}